Algorithm: Byzantine Fault Simulation in PBFT

Initialization:
1. Choose the total number of nodes in the network (total_nodes).
2. Create a list of PBFTNode instances representing the nodes.
3. Select the first node as the primary node responsible for proposing a value.
4. Propose a value(RETREAT) to achieve consensus on.
5. Choose one or more nodes to act as Byzantine nodes.
6. Byzantine nodes will intentionally deviate from the protocol, sending incorrect or conflicting messages.
7. primary node receive pre_prepare message from other nodes.
8. If the node is a Byzantine node, send conflicting PREPARE messages with different values.
If the node is not Byzantine:
Simulate receiving PREPARE messages from other nodes.
c. COMMIT Phase:

Certainly! Here's an algorithmic summary of the PBFT (Practical Byzantine Fault Tolerance) consensus algorithm based on the provided text:

**Algorithm: PBFT Consensus Algorithm**

**1. Overview:**
   - PBFT allows a distributed system to achieve consensus in the presence of malicious nodes (Byzantine nodes).
   - Cryptographic algorithms ensure data integrity and irrevocability.
   - Requires 3f+1 nodes for consensus with up to f Byzantine nodes.
   - At least 2f+1 non-Byzantine nodes are needed for consensus.

**2. Proving PBFT Algorithm:**
   - Majority rule forms the basis of consensus.
   - Byzantine nodes can interfere but cannot prevent consensus.
   - Proof that consensus can be reached under worst circumstances.

**3. Process of PBFT Algorithm:**
   
   **Roles:**
   - Client: Initiates transaction requests.
   - Primary: Packs transactions into blocks and finalizes them.
   - Replica: Also finalizes blocks.

   **Steps:**
   a. **Client Sends Request:**
      - Client sends a request to consensus nodes.
      - Primary broadcasts pre-prepare message.
      
   b. **Three-Phase Consensus Protocol:**
      - **Pre-Prepare:**
         - Primary sends pre-prepare messages to Replicas.
         - Replicas verify signature, view, and sequence.
         - Replicas broadcast prepare messages.
      
      - **Prepare:**
         - Node gathers 2f+1 prepare messages.
         - Node sets prepared status for message.
         - Node broadcasts commit message.
      
      - **Commit:**
         - Node gathers 2f+1 commit messages.
         - Node sets committed-local status for message.
         - Node applies changes to system state.

   c. **Response to Client:**
      - Client confirms consensus when receiving f+1 identical commit messages.

   d. **View Change:**
      - View-change protocol handles unavailability or faults.
      - New Primary is elected to initiate consensus.
      - Old consensus in the view is still valid.

**4. Summary:**
   - PBFT's three-phase protocol involves Primary, Replicas, and Clients.
   - Primary initiates consensus.
   - Replicas verify and vote.
   - View-change protocol handles unavailability and faults.
   - Consensus ensures data integrity and consistency.


